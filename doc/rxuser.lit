\chapter{$RX$ User Manual} %%%%%%%%%%%%%%%%%%%%%%%%%%
\label{chapter:rxuser}
\label{chap:rxuser}

\section{Introduction}
This chapter describes the program $RX$, 
written within the framework of this thesis.
$RX$ handles rational tree languages in term algebras with
arbitrary signatures. $RX$ performs the usual operations on
rational languages. 

$RX$ has been used to guess, and later verify,
a lot of the relations between languages that are used in the
decision procedure for $CL S$,
and the grammar for normalizing terms,
given in chapters \ref{chapter:termin} and \ref{chap:predN}
of this thesis.

Furthermore, $RX$'s input and output behaviour can be customized so
that it integrates smoothly with a typesetting system, much in the
spirit of a \emph{literate programming} tool.  $RX$ input may be
contained in a text document, and $RX$ output may be embedded in such
a document.  Additionally, $RX$ output can contain formatting
instructions to the typesetter.  In fact $RX$ is used to format the
very thesis you are now reading.

\newpage
\section{$RX$ internals} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

$RX$ internally represents rational tree languages by
finite tree automata. They can be non-deterministic
(bottom-up or top-down) or deterministic (bottom-up).

For details of the underlying theory, see chapter \ref{chapter:rxtheory}.

The external form, used for input and output,
is a non-deterministic top-down automaton
that could also be called a rational grammar.


%% \section{$RX$ implementation} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\medskip

$RX$ is written entirely in the pure, lazy functional programming
language Haskell. It uses Haskell-1.3 features. $RX$ is known to
work with these compilers/interpreters: hugs, ghc-2.02, hbc-0.9999.4.
It does not depend on compiler-specific extensions or libraries.

$RX$ uses publically available libraries for
\begin{enumerate}
\item Finite Maps and Sets
\item Parsing
\item Pretty Printing
\end{enumerate}
(Copies of these are included with the $RX$ source code distribution.)
These libraries helped me a lot when programming $RX$,
as they provide tried and tested and optimized solutions for standard tasks,
and allowed me to focus on finite automata programming.

%% \section{$RX$ availability} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\medskip

The source code of $RX$, and some additional information,
is available under terms of the GNU public license
\index{GNU}
from \verb+http://www5.informatik.uni-jena.de/~joe/rx/+.


\newpage
\section{$RX$ syntax} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

$RX$ lexically and syntactically borrows 
from the Haskell programming language.

\subsection*{$RX$ lexic}

$RX$ code consists of lines of characters.

The input may contain comments. A comment extends from 
\verb+--+ to the end of the line, or it is enclosed in
between \verb+{-+ and \verb+-}+.

$RX$ has these lexical tokens:
\begin{enumerate}
\item number (a sequence of digits)
\item name (an alphabetic character, 
  followed by a sequence of alphanumeric characters)
\item operator (a sequence of non-alphanumeric non-blank characters)
\item string (enclosed in double quotes)
\item group symbols 
  \verb+(+, \verb+)+, \verb+[+, \verb+]+, \verb+{+, \verb+}+
\item group separator \verb+,+ (comma).
  Note that \verb+;+ (semi-colon) is not a separator but an operator.
\end{enumerate}
The names \verb+arity+ and \verb+form+ are reserved.

A name may contain characters \verb+"_"+, \verb+"^"+, and \verb+"'"+,
and they'll have their expected interpretation when
the output is embedded in a \LaTeX\ document.

Names and operators together are called \emph{identifiers}.

A name enclosed in back-quotes behaves as if it were an operator.
From now on, \emph{operator} encompasses that meaning.

An operator enclosed in parentheses behaves as if it were a name.
From now on, \emph{name} encompasses that meaning.

%%% \newpage
\subsection*{$RX$ syntax}

$RX$ code is a sequence of \emph{declarations} and \emph{expressions}.

A \emph{declaration} declares one of these things:
\begin{enumerate}
\item
  the form of an identifier (see below),
\item
  the arity (number of required arguments) of names.

  Example: \verb+arity 2 power, times+
\item
  the precedence and associativity of operators.
  
  Example:
\begin{verbatim}
infixl 7 *
infixl 5 +
\end{verbatim}
\end{enumerate}

An \emph{expression} is a sequence of \emph{clauses}
separated by operators.

A \emph{clause} is a name followed by a sequence of \emph{atoms}.

An \emph{atom} is a name or a \emph{group}.

A \emph{group} is a sequence of expressions,
separated by group separators, enclosed in group symbols.
The group \verb+(x)+, where \verb+x+ is an expression,
is semantically equivalent to \verb+x+ alone.

\subsection*{$RX$ special syntax}

In $RX$, there is no partial application and there are no
higher order functions. In a function application, the function
must get exactly the number of arguments that its arity requires.

Arities that have not been explicitly declared (see above)
are implicitly set to 0 for names and 2 for operators.

This is more restrictive that Haskell but it allows for 
a nice shorthand notation: the operator \verb+@+ (called \emph{apply})
is implicitly inserted whenever a function has \emph{more}
arguments than necessary. Let \verb+f+ have arity 2,
then \verb+f x y b c+ is parsed as \verb+((f x y) @ b) @ c+.
This corresponds to the convention used in combinatory logic 
and lambda calculus.

This behavior can be controlled 
by the switch \verb+implicit+ and by the option \verb+apply+.
If \verb+implicit+ is \verb+on+,
then the binary operator that is the value of the option \verb+apply+
is inserted. Normally, this is \verb+@+.


\newpage
\section{$RX$ semantics}

In $RX$, the semantics of each identifier is a function from
state \(\times\) sequences of values to 
state \(\times\) values. The length of the sequence
is the arity of the identifier. 

Currently, the values are finite tree automata,
but this could be extended to a wider range of types.

The state is just the mapping
from identifiers to their meaning (semantics).
The pair (identifier, meaning) is called binding.

The state map can be extended by new bindings, 
but existing meanings cannot be overridden.

The operator \verb+=+ adds a new binding.
Examples:
\begin{verbatim}
q = 0
f a b = a + b * b
\end{verbatim}
If the arity of the bound identifier is 0 (a constant declaration), 
then the value of the whole expression is that of the right hand side.
If the arity is more than 0 (a function definition),
then the value of the whole expression is undefined.

The operator \verb+;+ combines the evaluation of two expressions
sequentially.
In \verb+a; b+, first \verb+a+ is evaluated, 
then \verb+b+ is evaluated in the state that resulted from the
evaluation of \verb+a+. The value of \verb+b+ is the
final result.

\subsection*{$RX$ special semantics}

So far, the description does not contain any hint on the range of values
that $RX$ operates on. This modularity is intentional, and could
be explored when extending $RX$ or re-using parts of it for other
purposes.

But we are going to use $RX$ for tree automata. The will be input and
output as rational tree grammars. 

First we need to specify the term algebra we're working in.
This happens implicitly.

Each expression has a term algebra associated with it
that consists of the \emph{constructors} that happen to be contained
in the expression's value. 

A \emph{constructor} is an identifier that is not bound.

Example:
\begin{verbatim}
arity 0 S
infixl 60 @
\end{verbatim}
This declares two constructors, one nullary, one binary.


A grammar is built by the
name \verb+grammar+ that gets two arguments: a start expression and
a set of rules. Example:

\begin{verbatim}
grammar x { x -> S, x -> S x + S x x }
\end{verbatim}
Remember that this is in fact \verb,x -> S @ x + (S @ x) @ x,
by the rule of implicit application.

Each rule has a variable on the left 
and an \emph{rule expression} on the right.
The start expression of the grammar also is an \emph{rule expression}.

A \emph{rule expression} looks like an expression (see above) but
there are restrictions on where grammar variables might occur:
Starting from the top of the syntax tree of a rule expression, on the
path to any grammar variable contained therein, only constructors and
\verb-++- operators are allowed. In branches of rule expressions where
no grammar variables occur, arbitrary expressions are permitted.

Note that \verb+grammar+ does not evaluate its arguments.
Rather, it behaves like a LISP special form that gets to see
the syntax tree of its argument.

\subsection*{$RX$ predefined identifiers}

There are predefined operators for rational languages:
\begin{enumerate}
\item \verb,++, union
\item \verb,\\, difference
\item \verb,&, intersection
\end{enumerate}

and predefined functions that only transform a language's representation,
but keep its meaning (the set of its words).
\begin{enumerate}
\item \verb,unify,:
  unify seemingly identical states in the automaton
\item \verb,useful,
  only keep reachable and productive states
\item \verb,det,
  make automaton deterministic
\item \verb,min,
  make automaton deterministic and then minimal
\end{enumerate}

\subsection*{Evaluation of expressions} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

If the switch \verb,eval, is \verb,on,, each expression is
evaluated and the evaluation may result in state changes
(because new bindings were added).

However, if evaluating an inline expression changes the current $RX$ state,
this change is not promoted to other code blocks or snippets.

That is, assignments cannot be hidden inside the text.
Rather, they must be made visible in code blocks.
(You can still cheat there, by turning the output off, see below.)

If the switch \verb,exp, is \verb,on,, the input expression is printed.
For normal typesetting, you would 
\begin{verbatim}
 .set (eval=off,exp=on)
\end{verbatim}

If the switch \verb,res, is \verb,on,, the result of
evaluating the input is printed. (If evaluation took place at all.)

\subsection*{Preprocessing} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The switches \verb+unify,useful,det,min+ tell whether the so named
functions should be automatically inserted on top of all expressions
that are being evaluated. In bindings, this refers to expressions
right of the \verb,=,.

The switch \verb,expand, tells whether the input expansion
is shown or hidden.


\subsection*{Postprocessing} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The result of an evaluation is a finite tree automaton.
It is shown as a rational grammar. There are switches that
control the appearance of that grammar.
\begin{enumerate}
\item \verb,foldconst,
  rules \verb,x -> e, where \verb,e, does not contain grammar
  variables, are applied to all other rules, and the deleted.
\item \verb,foldnonrec,
  rules \verb,x -> e, where \verb,e, does not contain \verb,x,,
  are applied to all other rules, and the deleted.
\item \verb,hidegrammar,
  if the rule set is empty, don't say \verb,grammar x {},.
  Rather, use \verb,x, instead.
\end{enumerate}


\newpage
\section{Controlling $RX$'s behaviour} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

In addition to the core language, $RX$ has means for preprocessing
its input, and specifying aspects of its behaviour.

\subsection*{Options}

While processing input, $RX$ keeps a set of \emph{options}.

An \emph{option set} is a mapping from strings to strings.
It maps \emph{options} to \emph{values}.

A \emph{switch} is an option that only takes on values 
of \verb+on+ or \verb+off+.

Options can be set by \emph{directives}, or on the
command line when invoking $RX$.

A \emph{directive} starts with a dot as the very first character in a line.

Options can be set globally by
\begin{verbatim}
 .set (opt1=val1, opt2=val2, ...)
\end{verbatim}
A \verb+.set+ is effective from where it stands to the end of
the file it is located in.

Option names and values can be given as $RX$ names or strings.

A value can also refer to another option's value by prepending
a dollar sign to it, as in 
.begin(keepsep="/")
\verb+.set (foo=$bar)+.
.end

Options can be set locally by
\begin{verbatim}
 .begin (opt1=val1,...)
    ...
 .end
\end{verbatim}
The new option set is effective only in between \verb+.begin+
and \verb+.end+.

\subsection*{Default values for options}

The file \verb,Defaults.hs, from the $RX$ source distribution
contains the option set that is compiled in. All of those
options can be changed, however.

\subsection*{Importing files}

$RX$ input can be split over several files. The \verb+.import+
directive includes the contents of a file into the input stream.
\begin{verbatim}
 .import file
\end{verbatim}
\verb+file+ must be the file's complete name as an $RX$ string.

The string \verb+"-"+, when used as a file name,
means the standard input stream. This is only really useful
on the command line, see below.

It is possible to set some options that are only in effect while
the imported file is processed
\begin{verbatim}
 .import (opt1=val1,...) file
\end{verbatim}

In any case, none of the possible \verb+.set+ commands in the
\emph{imported} file has an effect on the options in the \emph{importing} 
file.

\subsection*{$RX$ command line invocation}

When the $RX$ executable is invoked, it analyzes its command line,
takes appropriate actions, and writes its output to the standard
output stream, from where it may be redirected by other means.

On the command line, you may specify option values
and files to read. 

Example:
\begin{verbatim}
RX opt1=val1 opt2=val2 filea opt3=val3 fileb filec -
\end{verbatim}
is handled as
\begin{verbatim}
 .set (opt1=val1)
 .set (opt2=val2)
 .import "filea"
 .set (opt3=val3)
 .import "fileb"
 .import "filec"
 .import "-"
\end{verbatim}
Note that the last line means ``read standard input''.

Additionally, $RX$ might understand options for its underlying runtime system.
They depend on the compiler that had been used when building $RX$.
A common idiom is
\begin{verbatim}
RX +RTS -H50M -RTS opt1=val1 ...
\end{verbatim}
telling the system to use lots of heap space.


\newpage
\section{Literate Programming} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

A literate document contains text and code.
From this, $RX$ generates a text document
that has  code expressions and possibly their values converted to
formatted text.

The switch \verb,output, says whether to generate any
output at all. Beware that even if this is off, 
imports, sets, and evaluations may take place.

$RX$ knows whether it is currently looking at text or code
by looking up the value of the option \verb,current,. So a typical
code block is
\begin{verbatim}
 .begin(current=code)
    ...
 .end
\end{verbatim}
The physical lines inside such a block are glued together to
form logical lines that are fed into the $RX$ evaluator one by one.

A \emph{logical line} consists of one or more \emph{physical lines}.
Each physical line that starts with a non-blank character
begins a new logical line. Physical lines that start with a blank
character are called \emph{continuation lines}. They are appended
to the most recent logical line.

Each logical line must be a syntactically valid $RX$ expression.

Apart from code blocks, there may be code snippets contained
inside lines of text.

Example:
.begin(keepsep="/")
\begin{verbatim}
  ... the expression $S Q1 Q0$ denotes ...
\end{verbatim}
.end

Such inline code must be a valid expression.
It is also sent to the $RX$ evaluator.

There are two variations of inline code. They differ in
whether the separator is omitted or kept.
Per default,
.begin(keepsep="/",omitsep="/")
\begin{verbatim}
 .set (keepsep="$",omitsep="|")
\end{verbatim}
and \verb,$x$, will result in \verb,$y$,,
while \verb,|x|, will result in \verb,y,,
.end
where \verb,y, denotes the result of typesetting \verb,x,.

The default setting should prove reasonable,
and in fact $RX$ inline code mode can be seen 
as a replacement for \LaTeX's math mode.




\subsection*{Typesetting customization} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

$RX$ has two styles for typesetting its output:
\verb,plain, and \verb,latex,.

Both can be assigned independently to the options \verb,code,
and \verb,text,.

Example:
\begin{verbatim}
 .set (text=latex,code=plain)
\end{verbatim}
tells $RX$ to use \verb+\verb+ for inline code
and the \verb+{verbatim}+ environment for code blocks.

You can assign a special \LaTeX\ expansion to $RX$ identifiers.
This will be used when \verb,code=latex,. It is achieved by
form declarations, of which there are two kinds:

A \emph{passive form} is just a string that gets printed instead
of the identifier's name. Example:
\begin{verbatim}
 .begin(current=code,output=off)
 form S = "\textbf{S}"
 form (+) = "\cup"
 .end
\end{verbatim}
Note that form declarations happen inside code, not text.

An \emph{active} form is a formatting macro that takes arguments.
Example:
\begin{verbatim}
 .begin(current=code,output=off)
 form (/) 2 = "\frac#1#2"
 .end
\end{verbatim}

In the arguments of the operators, parentheses are inserted
so that the output is correctly parseable with the given operator 
precedences and associativities. 
This remains unaffected when a passive form is used for an operator.

When an active form is in effect, its arguments are typeset
for a very low precedence. So, there will be no outer parentheses,
because it is assumed that the form takes care of visual grouping.
For instance, \verb,4 / (1 + 3), will come out as \verb,\frac{4}{1 + 3},,
given the above declaration.

(As an aside, this idea of omitting some parentheses was already present
in the \texttt{smugweb} system \cite{waldmann:smugweb}.)

\subsection*{Typesetting trees}

As seen in this thesis, $RX$ can be conveniently used to read and
typeset trees. Reading is eased by the \emph{implicit apply} convention which
inserts \verb+@+ nodes.  These nodes can be visually typeset by giving
\verb+@+ an active form. In this paper we use \verb+tree.sty+
written by  Edward M. Reingold and Nachum Dershowitz
which in turn uses \PiCTeX.



\newpage
\section{$RX$ example} %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\label{sec:rxexample}

.set (code=plain,res=on)

.begin (current=code,output=off)
local contains, all, redex, normal, normal', t, x, y
arity 0 all, redex, normal, normal', t, x, y
arity 1 contains
.end

Here is some input that is used in the thesis itself.

First, describe the set of all $S$-terms.
.begin(current=code,eval=on)
all = grammar t { t -> S ++ t t }
.end
So $all$ is a constant whose value is an automaton that accepts
(produces) the set of all terms.

The set of all redexes obviously is
.begin(current=code,eval=on)
redex = S all all all
.end

Now we define a function with one argument.
.begin(current=code,eval=on)
contains x = grammar y { y -> x, y -> y all ++ all y }
.end


The argument is any language $x$, and the result 
is the language of all terms $y$ that contain $x$ as a subterm.

This allows to compute the set of normal forms.
.begin(current=code,eval=on)
normal = all \\ contains redex
.end

Finally, this could be compared to the representation
.begin(current=code,eval=on)
normal' = grammar t { t -> S, t -> S t, t -> S t t }
.end


.begin (current=code,output=off)
unlocal
.end
