.set (current=code,eval=on)

-- defines basic expressions and constructions
-- formatting things are omitted


infixl 60 @	-- binary constructor (is default)

.set (implicit = on, apply = "@")

T = S S
A = T S

M = grammar t { t -> S ++ t t }
N = grammar n { n -> S ++ S n ++ S n n }

-----------------------------------------------------

tri x = grammar t { t -> x ++ S t M ++ S M t }

infixr 50 /, \

X / Y = grammar g { g -> Y ++ X g }
X \ Y = grammar g { g -> X ++ g Y }

--------------------------------------------------------



M0 = M
M1 = M0 M
M2 = M1 M
M3 = M2 M
M4 = M3 M

-----------------------------------------------------



P = grammar p { p -> S ++ S p }
P0 = N \\ N
P1 = S ++ S P0
P2 = S ++ S P1
P3 = S ++ S P2
P4 = S ++ S P3

-----------------------------------------------------

Q = M \\ P
Q0 = M \\ P0
Q1 = M \\ P1
Q2 = M \\ P2
Q3 = M \\ P3
Q4 = M \\ P4

-----------------------------------------------------

N0 = T / (S ++ S N)
N01 = S P2 / (S ++ S N ++ S (S T) P2)

N1 = N01 \\ N0
N2 = N \\ N01

Bm = T / S (S P2) S
Lm = T / S T (S P2)

L = N1 \\ Bm
Lp = L \\ Lm

-----------------------------------------------------


